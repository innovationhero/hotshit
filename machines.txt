Business Plan of a galactic factory...

if i can build an artificial planet, a big ass sphere of metal that can use solar energy to power its internal factory..

then i can send it to mars where it will manefacture a certain product from the raw materials it got with it from earth or what its andriods can collect from local planets and they start building a certain product with zero operational costs and send the products back to earth.... awesome factory infinite energy, dorids fixing and manefacturing other droids..


the coolest way is to send the design of the product you want to this multi-purpose galactical factory and the factory will manfacture it and send it back to you Sir.

so its a good idea to start now on making automated factories science rock better and better coz once we figure out space and how to make droids maintain and manefacture themselves and other products with the unlimited supply of Energy from the Sun. then this will be a very very good business.




this timeout function gets the gridster ul html element from the html through the jquery selector, then it utalizes gridster plugin options draggable, gridster.options.draggable.stop = function(event,ui)


$timeout(function(){});





I need a function to check that all widgets got the right placeholder and call this function whenever i need. algorithm would be
-act 1: get hold of all the widgets
-act 2: get hold of all their size and location
- act 3 generate placeholders for all all of them respectivly






attachElementToGridster(li);

$scope.$watch('model.length', function(newValue, oldValue){});



/////////////////////////////////////////////////////// code from http://jsfiddle.net/PrtrR/2/ /////////////////////////////////////
var layout;
var grid_size = 100;
var grid_margin = 5;
var block_params = {
    max_width: 6,
    max_height: 6
};
$(function() {

    layout = $('.layouts_grid ul').gridster({
        widget_margins: [grid_margin, grid_margin],
        widget_base_dimensions: [grid_size, grid_size],
        serialize_params: function($w, wgd) {
            return {
                x: wgd.col,
                y: wgd.row,
                width: wgd.size_x,
                height: wgd.size_y,
                id: $($w).attr('data-id'),
                name: $($w).find('.block_name').html(),
            };
        },
        min_rows: block_params.max_height
    }).data('gridster');

    $('.layout_block').resizable({
        grid: [grid_size + (grid_margin * 2), grid_size + (grid_margin * 2)],
        animate: false,
        minWidth: grid_size,
        minHeight: grid_size,
        containment: '#layouts_grid ul',
        autoHide: true,
        stop: function(event, ui) {
            var resized = $(this);
            setTimeout(function() {
                resizeBlock(resized);
            }, 300);
        }
    });

    $('.ui-resizable-handle').hover(function() {

        layout.disable();
    }, function() {

        layout.enable();
    });

    function resizeBlock(elmObj) {

        var elmObj = $(elmObj);
        var w = elmObj.width() - grid_size;
        var h = elmObj.height() - grid_size;

        for (var grid_w = 1; w > 0; w -= (grid_size + (grid_margin * 2))) {

            grid_w++;
        }

        for (var grid_h = 1; h > 0; h -= (grid_size + (grid_margin * 2))) {

            grid_h++;
        }

        layout.resize_widget(elmObj, grid_w, grid_h);
    }
});
